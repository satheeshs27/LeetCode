-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OPTIMAL APPROACH
````````````````
class Solution {
    public ListNode oddEvenList(ListNode head) {
        
        if(head == null || head.next == null) 
            return head;

        ListNode odd  = head;
        ListNode even = head.next;
        ListNode temp = even;

        while(even != null && even.next != null){
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }
        odd.next = temp;

        return head;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null) return head;
        ListNode odd = head;
        ListNode even = head.next;

        List <Integer> reorder = new LinkedList<>();

        while( odd != null){
            if(odd.next == null){
                reorder.add(odd.val);
                break;
            }
            reorder.add(odd.val);
            odd = odd.next.next;
        }
        while(even != null){
            if(even.next == null){
                reorder.add(even.val);
                break;
            }
            reorder.add(even.val);
            even = even.next.next;
            
        }
        ListNode x = head;

        for(int i : reorder){
            x.val = i;
            x = x.next;
        }
        return head;
    }
}
